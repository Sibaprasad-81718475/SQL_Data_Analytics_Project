# SQL_Data_Analytics_End_to_End_projects
-- QUERY 1 Air Cargo Analysis.sql

CREATE DATABASE AIR_CARGO ;

-- QUERY 2 : CREATING A ROUTES_DETAILS TABLE WITH THE SPECIFIED CONSTRAINT -

CREATE TABLE ROUTES_DETAILS 
(ROUTE_ID INT NOT NULL, UNIQUE (ROUTE_ID),
 FLIGHT_NUM INT NOT NULL, CHECK (FLIGHT_NUM > 0),
 ORIGIN_AIRPORT TEXT, DESTINATION_AIRPORT TEXT, AIRCRAFT_ID VARCHAR(30), 
 DISTANCE_MILES INT , CHECK(DISTANCE_MILES > 0)) ;
 
-- QUERY 3 : CREATING A PASSENGERS _ON_FLIGHT TABLE WITH THE SPECIFIED CONSTRAINT -

create table passengers_on_flights
(customer_id int not null, unique (customer_id),
air_craft_id varchar(30),route_id int not null,unique(route_id),
depart text, arrival text ,seat_num text ,class_id text,
travel_date text,flight_num int not null );

-- QUERY 4 : CREATING A CUSTOMERS TABLE WITH THE SPECIFIED CONSTRAINT -

create table customers 
(customers_id int not null,unique (customers_id),
first_name text,last_name text,date_of_birth text,gender text);

-- QUERY 5 : CREATING A TICKET_DETAILS WITH THE SPECIFIED CONSTRAINT -

create table ticket_details
(p_date text, customer_id int not null,
air_craft_id varchar(30), class_id text,
no_of_tickets int not null,a_code text,
price_per_ticket int not null ,brand text);



-- QUERY 6: PASSENGER DETAILS WHO HAVE TRAVELLED IN ROUTE_ID 1 TO 25 -
SELECT * FROM PASSENGERS_ON_FLIGHTS
WHERE ROUTE_ID BETWEEN 1 AND 25 
ORDER BY CUSTOMER_ID;


--  QUERY 7 : TOTAL NUMBER OF PASSENGERS AND TOTAL REVENUE FROM BUSINESS CLASS -
SELECT COUNT(DISTINCT CUSTOMER_ID) AS 'TOTAL PASSENGERS' ,
SUM(PRICE_PER_TICKET * NO_OF_TICKETS) AS 'TOTAL REVENUE FROM BUSSINESS CLASS' 
FROM TICKET_DETAILS
WHERE CLASS_ID = 'BUSSINESS' ;


-- QUERY 8 : GENERATING FULL NAME OF THE CUSTOMER -
SELECT UCASE(CONCAT(FIRST_NAME , ' ' , LAST_NAME)) AS FULL_NAME 
FROM CUSTOMER_DETAILS ;


-- QUERY 9 : CUSTOMER DETAILS WHO HAVE BOOKED A TICKET -
SELECT * FROM CUSTOMER 
WHERE CUSTOMER_ID IN 
(SELECT DISTINCT CUSTOMER_ID FROM TICKET_DETAILS)
ORDER BY CUSTOMER_ID ;


-- QUERY 10 : CUSTOMER DETAILS BASED ON CUSTOMER_ID AND BRAND(EMIRATES) -
SELECT CUSTOMER_ID, FIRST_NAME , LAST_NAME FROM CUSTOMER
WHERE CUSTOMER_ID IN 
(SELECT CUSTOMER_ID FROM TICKET_DETAILS WHERE BRAND = 'EMIRATES' )
ORDER BY CUSTOMER_ID ;


-- QUERY 11 : CUSTOMERS WHO HAVE TRAVELLED IN ECONOMY CLASS -
SELECT * FROM PASSENGERS_ON_FLIGHTS 
GROUP BY SEAT_NUM
HAVING CLASS_ID = 'ECONOMY'
ORDER BY CUSTOMER_ID ;

-- QUERY 12 : DISPLAY IF TOTAL REVENUE CROSSED 10000 -
SELECT IF(SUM(PRICE_PER_TICKET) >10000 , "YES", "NO") AS 'DID REVENUE CROSSED 10000?'
FROM TICKET_DETAILS;


-- QUERY 13 : MAXIMUM TICKET PRICE OF EACH CLASS -
SELECT DISTINCT CLASS_ID ,
MAX(PRICE_PER_TICKET) OVER (PARTITION BY CLASS_ID) AS 'MAXIMUM TICKET PRICE'
FROM TICKET_DETAILS ;


-- QUERY 14 : EXTRACTING PASSENGER DETAILS ON ROUTE 4 BY CREATING AN INDEX TO IMPROVE SPEED AND PERFORMANCE OF THE TABLE -
CREATE INDEX INDEX1 ON PASSENGERS_ON_FLIGHTS (ROUTE_ID);
SELECT * FROM PASSENGERS_ON_FLIGHTS
WHERE ROUTE_ID = 4 ;




-- QUERY 15 : DISPLAYING EXECUTION PLAN FOR THE QUERY BELOW -
 SELECT * FROM ROUTES WHERE ROUTE_ID = 4 ;




-- QUERY 16 :  DISPLAYING TOTAL PRICE OF ALL TICKETS BOOKED BY A CUSTOMER ACROSS DIFFERENT AIRCRAFT IDs -
SELECT  CUSTOMER_ID, AIRCRAFT_ID , SUM(PRICE_PER_TICKET * NO_OF_TICKETS) AS 'TOTAL PRICE' FROM TICKET_DETAILS
GROUP BY CUSTOMER_ID, AIRCRAFT_ID
ORDER BY CUSTOMER_ID, AIRCRAFT_ID ;


-- QUERY 17 : CREATING A VIEW TO SHOW PASSENGER DETAILS IN BUSINESS CLASS -

CREATE VIEW AIRCARGO_VIEW AS
SELECT * FROM TICKET_DETAILS 
WHERE CLASS_ID = 'BUSSINESS' ;

SELECT * FROM AIRCARGO_VIEW ;




-- QUERY 18 : CREATING A PROCEDURE TO DETERMINE THE ROUTES ALONG WITH AN ERROR HANDLER -
DELIMITER //
CREATE PROCEDURE ROUTES_PROC_WITH_ERROR_HANDLER()
BEGIN
DECLARE CONTINUE HANDLER FOR SQLSTATE '42S02'
SELECT 'SQLSTATE Handler - Table Not Found' AS msg;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
BEGIN 
GET DIAGNOSTICS CONDITION 1 @sqlstate =
RETURNED_SQLSTATE, @errno = MYSQL_ERRNO,
@text = MESSAGE_TEXT;
SET @full_error = CONCAT("SQLEXCEPTION Handler - ERROR ", @errno, " (", @sqlstate, "): ", @text); SELECT
@full_error AS msg;
END;

SELECT ROUTE_ID, FLIGHT_NUM FROM ROUTES ;
END //

CALL ROUTES_PROC_WITH_ERROR_HANDLER() ;




-- QUERY 19 : CREATING PROCEDURE TO DISPLAY PASSENGER DETAILS WHERE DISTANCE TRAVELLED IS > 2000 -
DELIMITER //
CREATE PROCEDURE ROUTES_PROC() 
BEGIN
SELECT * FROM ROUTES WHERE 
DISTANCE_MILES > 2000 ;
END //

CALL ROUTES_PROC() ;





-- QUERY 20 : CREATING A STORED PROCEDURE WHICH WILL DIVIDE DISTANCE TRAVELLED BY EACH FLIGHT INTO THREE CATEGORIES -
DELIMITER //
CREATE PROCEDURE CATEGORIES(FLIGHT_NUMBER INT)
BEGIN
DECLARE DIST INT DEFAULT 1;
DECLARE CATEGORY TEXT ;
SELECT DISTANCE_MILES INTO DIST FROM ROUTES
WHERE FLIGHT_NUMBER = FLIGHT_NUM  ;
IF
DIST BETWEEN 0 AND 2000 THEN SET CATEGORY = 'SHORT DISTANCE TRAVEL';
ELSEIF DIST > 2000 AND DIST <= 6500 THEN SET CATEGORY = 'INTERMEDIATE DISTANCE TRAVEL';
ELSEIF DIST > 6500 THEN SET CATEGORY = 'LONG DISTANCE TRAVEL';
END IF ;
SELECT CATEGORY;
END //

CALL CATEGORIES(1111) ;


-- QUERY 21 : EXTRACTING TICKET DETAILS AND SPECIFYING IF COMPLIMENTARY SERVICES ARE PROVIDED OR NO USING A STORED FUNCTION -

DELIMITER //
CREATE FUNCTION COMP_SERVICES_FUNC(CLASS TEXT)
RETURNS TEXT DETERMINISTIC
BEGIN
DECLARE SERVICES TEXT ;
IF
CLASS = 'BUSSINESS' THEN SET SERVICES = 'YES' ;
ELSEIF CLASS = 'ECONOMY PLUS' THEN SET SERVICES = 'YES' ;
ELSE SET SERVICES = 'NO' ;
END IF;
RETURN (SERVICES);
END //

-- CREATING A STORED PROCEDURE CONTAINING THE ABOVE CREATED STORED FUNCTION AS AN INPUT -

DELIMITER //
CREATE PROCEDURE COMP_SERVICES_PROC()
BEGIN
SELECT P_DATE, CUSTOMER_ID, CLASS_ID ,COMP_SERVICES_FUNC(CLASS_ID) AS 'COMPLIMENTARY SERVICES PROVIDED?' FROM TICKET_DETAILS ;
END //  	


CALL COMP_SERVICES_PROC() ;
